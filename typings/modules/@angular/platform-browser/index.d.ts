// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/browser/location/browser_platform_location.d.ts
declare module '~@angular/platform-browser/src/browser/location/browser_platform_location' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { PlatformLocation, UrlChangeListener } from '@angular/common';
/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {@link Location}.
 *
 * @stable
 */
export class BrowserPlatformLocation extends PlatformLocation {
    private _location;
    private _history;
    constructor();
    getBaseHrefFromDOM(): string;
    onPopState(fn: UrlChangeListener): void;
    onHashChange(fn: UrlChangeListener): void;
    pathname: string;
    search: string;
    hash: string;
    pushState(state: any, title: string, url: string): void;
    replaceState(state: any, title: string, url: string): void;
    forward(): void;
    back(): void;
}
}
declare module '@angular/platform-browser/src/browser/location/browser_platform_location' {
export * from '~@angular/platform-browser/src/browser/location/browser_platform_location';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/browser/title.d.ts
declare module '~@angular/platform-browser/src/browser/title' {
/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * @experimental
 */
export class Title {
    /**
     * Get the title of the current HTML document.
     * @returns {string}
     */
    getTitle(): string;
    /**
     * Set the title of the current HTML document.
     * @param newTitle
     */
    setTitle(newTitle: string): void;
}
}
declare module '@angular/platform-browser/src/browser/title' {
export * from '~@angular/platform-browser/src/browser/title';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/browser/tools/tools.d.ts
declare module '~@angular/platform-browser/src/browser/tools/tools' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ComponentRef } from '@angular/core';
/**
 * Enabled Angular 2 debug tools that are accessible via your browser's
 * developer console.
 *
 * Usage:
 *
 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
 *    then hit Enter.
 *
 * @experimental All debugging apis are currently experimental.
 */
export function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;
/**
 * Disables Angular 2 tools.
 *
 * @experimental All debugging apis are currently experimental.
 */
export function disableDebugTools(): void;
}
declare module '@angular/platform-browser/src/browser/tools/tools' {
export * from '~@angular/platform-browser/src/browser/tools/tools';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/facade/collection.d.ts
declare module '~@angular/platform-browser/src/facade/collection' {
export var Map: MapConstructor;
export var Set: SetConstructor;
export class MapWrapper {
    static clone<K, V>(m: Map<K, V>): Map<K, V>;
    static createFromStringMap<T>(stringMap: {
        [key: string]: T;
    }): Map<string, T>;
    static toStringMap<T>(m: Map<string, T>): {
        [key: string]: T;
    };
    static createFromPairs(pairs: any[]): Map<any, any>;
    static clearValues(m: Map<any, any>): void;
    static iterable<T>(m: T): T;
    static keys<K>(m: Map<K, any>): K[];
    static values<V>(m: Map<any, V>): V[];
}
/**
 * Wraps Javascript Objects
 */
export class StringMapWrapper {
    static create(): {
        [k: string]: any;
    };
    static contains(map: {
        [key: string]: any;
    }, key: string): boolean;
    static get<V>(map: {
        [key: string]: V;
    }, key: string): V;
    static set<V>(map: {
        [key: string]: V;
    }, key: string, value: V): void;
    static keys(map: {
        [key: string]: any;
    }): string[];
    static values<T>(map: {
        [key: string]: T;
    }): T[];
    static isEmpty(map: {
        [key: string]: any;
    }): boolean;
    static delete(map: {
        [key: string]: any;
    }, key: string): void;
    static forEach<K, V>(map: {
        [key: string]: V;
    }, callback: Function): void;
    static merge<V>(m1: {
        [key: string]: V;
    }, m2: {
        [key: string]: V;
    }): {
        [key: string]: V;
    };
    static equals<V>(m1: {
        [key: string]: V;
    }, m2: {
        [key: string]: V;
    }): boolean;
}
/**
 * A boolean-valued function over a value, possibly including context information
 * regarding that value's position in an array.
 */
export interface Predicate<T> {
    (value: T, index?: number, array?: T[]): boolean;
}
export class ListWrapper {
    static createFixedSize(size: number): any[];
    static createGrowableSize(size: number): any[];
    static clone<T>(array: T[]): T[];
    static forEachWithIndex<T>(array: T[], fn: (t: T, n: number) => void): void;
    static first<T>(array: T[]): T;
    static last<T>(array: T[]): T;
    static indexOf<T>(array: T[], value: T, startIndex?: number): number;
    static contains<T>(list: T[], el: T): boolean;
    static reversed<T>(array: T[]): T[];
    static concat(a: any[], b: any[]): any[];
    static insert<T>(list: T[], index: number, value: T): void;
    static removeAt<T>(list: T[], index: number): T;
    static removeAll<T>(list: T[], items: T[]): void;
    static remove<T>(list: T[], el: T): boolean;
    static clear(list: any[]): void;
    static isEmpty(list: any[]): boolean;
    static fill(list: any[], value: any, start?: number, end?: number): void;
    static equals(a: any[], b: any[]): boolean;
    static slice<T>(l: T[], from?: number, to?: number): T[];
    static splice<T>(l: T[], from: number, length: number): T[];
    static sort<T>(l: T[], compareFn?: (a: T, b: T) => number): void;
    static toString<T>(l: T[]): string;
    static toJSON<T>(l: T[]): string;
    static maximum<T>(list: T[], predicate: (t: T) => number): T;
    static flatten<T>(list: Array<T | T[]>): T[];
    static addAll<T>(list: Array<T>, source: Array<T>): void;
}
export function isListLikeIterable(obj: any): boolean;
export function areIterablesEqual(a: any, b: any, comparator: Function): boolean;
export function iterateListLike(obj: any, fn: Function): void;
export class SetWrapper {
    static createFromList<T>(lst: T[]): Set<T>;
    static has<T>(s: Set<T>, key: T): boolean;
    static delete<K>(m: Set<K>, k: K): void;
}
}
declare module '@angular/platform-browser/src/facade/collection' {
export * from '~@angular/platform-browser/src/facade/collection';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/facade/lang.d.ts
declare module '~@angular/platform-browser/src/facade/lang' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export interface BrowserNodeGlobal {
    Object: typeof Object;
    Array: typeof Array;
    Map: typeof Map;
    Set: typeof Set;
    Date: DateConstructor;
    RegExp: RegExpConstructor;
    JSON: typeof JSON;
    Math: any;
    assert(condition: any): void;
    Reflect: any;
    getAngularTestability: Function;
    getAllAngularTestabilities: Function;
    getAllAngularRootElements: Function;
    frameworkStabilizers: Array<Function>;
    setTimeout: Function;
    clearTimeout: Function;
    setInterval: Function;
    clearInterval: Function;
    encodeURI: Function;
}
export function scheduleMicroTask(fn: Function): void;
export const IS_DART: boolean;
var _global: BrowserNodeGlobal;
export { _global as global };
/**
 * Runtime representation a type that a Component or other object is instances of.
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
 * the `MyCustomComponent` constructor function.
 *
 * @stable
 */
export var Type: FunctionConstructor;
export interface Type extends Function {
}
/**
 * Runtime representation of a type that is constructable (non-abstract).
 */
export interface ConcreteType<T> extends Type {
    new (...args: any[]): T;
}
export function getTypeNameForDebugging(type: Type): string;
export var Math: any;
export var Date: DateConstructor;
export function isPresent(obj: any): boolean;
export function isBlank(obj: any): boolean;
export function isBoolean(obj: any): boolean;
export function isNumber(obj: any): boolean;
export function isString(obj: any): obj is String;
export function isFunction(obj: any): boolean;
export function isType(obj: any): boolean;
export function isStringMap(obj: any): obj is Object;
export function isStrictStringMap(obj: any): boolean;
export function isPromise(obj: any): boolean;
export function isArray(obj: any): boolean;
export function isDate(obj: any): obj is Date;
export function noop(): void;
export function stringify(token: any): string;
export function serializeEnum(val: any): number;
export function deserializeEnum(val: any, values: Map<number, any>): any;
export function resolveEnumToken(enumValue: any, val: any): string;
export class StringWrapper {
    static fromCharCode(code: number): string;
    static charCodeAt(s: string, index: number): number;
    static split(s: string, regExp: RegExp): string[];
    static equals(s: string, s2: string): boolean;
    static stripLeft(s: string, charVal: string): string;
    static stripRight(s: string, charVal: string): string;
    static replace(s: string, from: string, replace: string): string;
    static replaceAll(s: string, from: RegExp, replace: string): string;
    static slice<T>(s: string, from?: number, to?: number): string;
    static replaceAllMapped(s: string, from: RegExp, cb: (m: string[]) => string): string;
    static contains(s: string, substr: string): boolean;
    static compare(a: string, b: string): number;
}
export class StringJoiner {
    parts: string[];
    constructor(parts?: string[]);
    add(part: string): void;
    toString(): string;
}
export class NumberParseError extends Error {
    message: string;
    name: string;
    constructor(message: string);
    toString(): string;
}
export class NumberWrapper {
    static toFixed(n: number, fractionDigits: number): string;
    static equal(a: number, b: number): boolean;
    static parseIntAutoRadix(text: string): number;
    static parseInt(text: string, radix: number): number;
    static parseFloat(text: string): number;
    static NaN: number;
    static isNumeric(value: any): boolean;
    static isNaN(value: any): boolean;
    static isInteger(value: any): boolean;
}
export var RegExp: RegExpConstructor;
export class RegExpWrapper {
    static create(regExpStr: string, flags?: string): RegExp;
    static firstMatch(regExp: RegExp, input: string): RegExpExecArray;
    static test(regExp: RegExp, input: string): boolean;
    static matcher(regExp: RegExp, input: string): {
        re: RegExp;
        input: string;
    };
    static replaceAll(regExp: RegExp, input: string, replace: Function): string;
}
export class RegExpMatcherWrapper {
    static next(matcher: {
        re: RegExp;
        input: string;
    }): RegExpExecArray;
}
export class FunctionWrapper {
    static apply(fn: Function, posArgs: any): any;
    static bind(fn: Function, scope: any): Function;
}
export function looseIdentical(a: any, b: any): boolean;
export function getMapKey<T>(value: T): T;
export function normalizeBlank(obj: Object): any;
export function normalizeBool(obj: boolean): boolean;
export function isJsObject(o: any): boolean;
export function print(obj: Error | Object): void;
export function warn(obj: Error | Object): void;
export class Json {
    static parse(s: string): Object;
    static stringify(data: Object): string;
}
export class DateWrapper {
    static create(year: number, month?: number, day?: number, hour?: number, minutes?: number, seconds?: number, milliseconds?: number): Date;
    static fromISOString(str: string): Date;
    static fromMillis(ms: number): Date;
    static toMillis(date: Date): number;
    static now(): Date;
    static toJson(date: Date): string;
}
export function setValueOnPath(global: any, path: string, value: any): void;
export function getSymbolIterator(): string | symbol;
export function evalExpression(sourceUrl: string, expr: string, declarations: string, vars: {
    [key: string]: any;
}): any;
export function isPrimitive(obj: any): boolean;
export function hasConstructor(value: Object, type: Type): boolean;
export function escape(s: string): string;
export function escapeRegExp(s: string): string;
}
declare module '@angular/platform-browser/src/facade/lang' {
export * from '~@angular/platform-browser/src/facade/lang';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/debug/by.d.ts
declare module '~@angular/platform-browser/src/dom/debug/by' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DebugElement } from '@angular/core';
import { Predicate } from '~@angular/platform-browser/src/facade/collection';
import { Type } from '~@angular/platform-browser/src/facade/lang';
/**
 * Predicates for use with {@link DebugElement}'s query functions.
 *
 * @experimental All debugging apis are currently experimental.
 */
export class By {
    /**
     * Match all elements.
     *
     * ## Example
     *
     * {@example platform/dom/debug/ts/by/by.ts region='by_all'}
     */
    static all(): Predicate<DebugElement>;
    /**
     * Match elements by the given CSS selector.
     *
     * ## Example
     *
     * {@example platform/dom/debug/ts/by/by.ts region='by_css'}
     */
    static css(selector: string): Predicate<DebugElement>;
    /**
     * Match elements that have the given directive present.
     *
     * ## Example
     *
     * {@example platform/dom/debug/ts/by/by.ts region='by_directive'}
     */
    static directive(type: Type): Predicate<DebugElement>;
}
}
declare module '@angular/platform-browser/src/dom/debug/by' {
export * from '~@angular/platform-browser/src/dom/debug/by';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/dom_tokens.d.ts
declare module '~@angular/platform-browser/src/dom/dom_tokens' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { OpaqueToken } from '@angular/core';
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * @stable
 */
export const DOCUMENT: OpaqueToken;
}
declare module '@angular/platform-browser/src/dom/dom_tokens' {
export * from '~@angular/platform-browser/src/dom/dom_tokens';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/events/event_manager.d.ts
declare module '~@angular/platform-browser/src/dom/events/event_manager' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgZone, OpaqueToken } from '@angular/core';
/**
 * @stable
 */
export const EVENT_MANAGER_PLUGINS: OpaqueToken;
/**
 * @stable
 */
export class EventManager {
    private _zone;
    private _plugins;
    constructor(plugins: EventManagerPlugin[], _zone: NgZone);
    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;
    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;
    getZone(): NgZone;
}
export class EventManagerPlugin {
    manager: EventManager;
    supports(eventName: string): boolean;
    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;
    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;
}
}
declare module '@angular/platform-browser/src/dom/events/event_manager' {
export * from '~@angular/platform-browser/src/dom/events/event_manager';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/events/hammer_common.d.ts
declare module '~@angular/platform-browser/src/dom/events/hammer_common' {
import { EventManagerPlugin } from '~@angular/platform-browser/src/dom/events/event_manager';
export class HammerGesturesPluginCommon extends EventManagerPlugin {
    constructor();
    supports(eventName: string): boolean;
}
}
declare module '@angular/platform-browser/src/dom/events/hammer_common' {
export * from '~@angular/platform-browser/src/dom/events/hammer_common';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/events/hammer_gestures.d.ts
declare module '~@angular/platform-browser/src/dom/events/hammer_gestures' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { OpaqueToken } from '@angular/core';
import { HammerGesturesPluginCommon } from '~@angular/platform-browser/src/dom/events/hammer_common';
/**
 * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
 * Hammer gestures.
 *
 * @experimental
 */
export const HAMMER_GESTURE_CONFIG: OpaqueToken;
export interface HammerInstance {
    on(eventName: string, callback: Function): void;
    off(eventName: string, callback: Function): void;
}
/**
 * @experimental
 */
export class HammerGestureConfig {
    events: string[];
    overrides: {
        [key: string]: Object;
    };
    buildHammer(element: HTMLElement): HammerInstance;
}
export class HammerGesturesPlugin extends HammerGesturesPluginCommon {
    private _config;
    constructor(_config: HammerGestureConfig);
    supports(eventName: string): boolean;
    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;
    isCustomEvent(eventName: string): boolean;
}
}
declare module '@angular/platform-browser/src/dom/events/hammer_gestures' {
export * from '~@angular/platform-browser/src/dom/events/hammer_gestures';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/core_private.d.ts
declare module '~@angular/platform-browser/core_private' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { __core_private__ as r, __core_private_types__ as t } from '@angular/core';
export type RenderDebugInfo = t.RenderDebugInfo;
export var RenderDebugInfo: typeof t.RenderDebugInfo;
export var wtfInit: typeof t.wtfInit;
export var ReflectionCapabilities: typeof t.ReflectionCapabilities;
export var VIEW_ENCAPSULATION_VALUES: typeof t.VIEW_ENCAPSULATION_VALUES;
export type DebugDomRootRenderer = t.DebugDomRootRenderer;
export var DebugDomRootRenderer: typeof t.DebugDomRootRenderer;
/**
 * @experimental bogus marker to pass the ts-api-guardian's check - this api should be public so
 * this line will go away when that happens
 */
export var SecurityContext: typeof t.SecurityContext;
export type SecurityContext = t.SecurityContext;
export var SanitizationService: typeof t.SanitizationService;
export type SanitizationService = t.SanitizationService;
export var reflector: typeof t.reflector;
export type NoOpAnimationPlayer = t.NoOpAnimationPlayer;
export var NoOpAnimationPlayer: typeof t.NoOpAnimationPlayer;
export type AnimationPlayer = t.AnimationPlayer;
export var AnimationPlayer: typeof t.AnimationPlayer;
export type NoOpAnimationDriver = t.NoOpAnimationDriver;
export var NoOpAnimationDriver: typeof t.NoOpAnimationDriver;
export type AnimationDriver = t.AnimationDriver;
export var AnimationDriver: typeof t.AnimationDriver;
export type AnimationSequencePlayer = t.AnimationSequencePlayer;
export var AnimationSequencePlayer: typeof t.AnimationSequencePlayer;
export type AnimationGroupPlayer = t.AnimationGroupPlayer;
export var AnimationGroupPlayer: typeof t.AnimationGroupPlayer;
export type AnimationKeyframe = t.AnimationKeyframe;
export var AnimationKeyframe: typeof t.AnimationKeyframe;
export type AnimationStyles = t.AnimationStyles;
export var AnimationStyles: typeof t.AnimationStyles;
export var prepareFinalAnimationStyles: typeof t.prepareFinalAnimationStyles;
export var balanceAnimationKeyframes: typeof t.balanceAnimationKeyframes;
export var flattenStyles: typeof t.flattenStyles;
export var clearStyles: typeof t.clearStyles;
export var collectAndResolveStyles: typeof r.collectAndResolveStyles;
}
declare module '@angular/platform-browser/core_private' {
export * from '~@angular/platform-browser/core_private';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/security/dom_sanitization_service.d.ts
declare module '~@angular/platform-browser/src/security/dom_sanitization_service' {
import { SanitizationService, SecurityContext } from '~@angular/platform-browser/core_private';
export { SecurityContext };
/**
 * Marker interface for a value that's safe to use in a particular context.
 *
 * @stable
 */
export interface SafeValue {
}
/**
 * Marker interface for a value that's safe to use as HTML.
 *
 * @stable
 */
export interface SafeHtml extends SafeValue {
}
/**
 * Marker interface for a value that's safe to use as style (CSS).
 *
 * @stable
 */
export interface SafeStyle extends SafeValue {
}
/**
 * Marker interface for a value that's safe to use as JavaScript.
 *
 * @stable
 */
export interface SafeScript extends SafeValue {
}
/**
 * Marker interface for a value that's safe to use as a URL linking to a document.
 *
 * @stable
 */
export interface SafeUrl extends SafeValue {
}
/**
 * Marker interface for a value that's safe to use as a URL to load executable code from.
 *
 * @stable
 */
export interface SafeResourceUrl extends SafeValue {
}
/**
 * DomSanitizationService helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](http://g.co/ng/security).
 *
 * @stable
 */
export abstract class DomSanitizationService implements SanitizationService {
    /**
     * Sanitizes a value for use in the given SecurityContext.
     *
     * If value is trusted for the context, this method will unwrap the contained safe value and use
     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
     * is responsible to make sure that the value can definitely be safely used in the given context.
     */
    abstract sanitize(context: SecurityContext, value: any): string;
    /**
     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
     * leave safe HTML intact, so in most situations this method should not be used.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     */
    abstract bypassSecurityTrustHtml(value: string): SafeHtml;
    /**
     * Bypass security and trust the given value to be safe style value (CSS).
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     */
    abstract bypassSecurityTrustStyle(value: string): SafeStyle;
    /**
     * Bypass security and trust the given value to be safe JavaScript.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     */
    abstract bypassSecurityTrustScript(value: string): SafeScript;
    /**
     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
     * in hyperlinks or `<img src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     */
    abstract bypassSecurityTrustUrl(value: string): SafeUrl;
    /**
     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
     * be used to load executable code from, like `<script src>`, or `<iframe src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     */
    abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;
}
export class DomSanitizationServiceImpl extends DomSanitizationService {
    sanitize(ctx: SecurityContext, value: any): string;
    private checkNotSafeValue(value, expectedType);
    bypassSecurityTrustHtml(value: string): SafeHtml;
    bypassSecurityTrustStyle(value: string): SafeStyle;
    bypassSecurityTrustScript(value: string): SafeScript;
    bypassSecurityTrustUrl(value: string): SafeUrl;
    bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;
}
}
declare module '@angular/platform-browser/src/security/dom_sanitization_service' {
export * from '~@angular/platform-browser/src/security/dom_sanitization_service';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/browser.d.ts
declare module '~@angular/platform-browser/src/browser' {
import { PlatformRef } from '@angular/core';
/**
 * A set of providers to initialize the Angular platform in a web browser.
 *
 * Used automatically by `bootstrap`, or can be passed to {@link platform}.
 *
 * @experimental API related to bootstrapping are still under review.
 */
export const BROWSER_PLATFORM_PROVIDERS: Array<any>;
/**
 * @security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 * @experimental
 */
export const BROWSER_SANITIZATION_PROVIDERS: Array<any>;
/**
 * A set of providers to initialize an Angular application in a web browser.
 *
 * Used automatically by `bootstrap`, or can be passed to {@link PlatformRef.application}.
 *
 * @experimental API related to bootstrapping are still under review.
 */
export const BROWSER_APP_PROVIDERS: Array<any>;
/**
 * @experimental API related to bootstrapping are still under review.
 */
export function browserPlatform(): PlatformRef;
}
declare module '@angular/platform-browser/src/browser' {
export * from '~@angular/platform-browser/src/browser';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/shared/client_message_broker.d.ts
declare module '~@angular/platform-browser/src/web_workers/shared/client_message_broker' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Type } from '@angular/core';
import { MessageBus } from '~@angular/platform-browser/src/web_workers/shared/message_bus';
import { Serializer } from '~@angular/platform-browser/src/web_workers/shared/serializer';
/**
 * @experimental WebWorker support in Angular is experimental.
 */
export abstract class ClientMessageBrokerFactory {
    /**
     * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.
     */
    abstract createMessageBroker(channel: string, runInZone?: boolean): ClientMessageBroker;
}
export class ClientMessageBrokerFactory_ extends ClientMessageBrokerFactory {
    private _messageBus;
    constructor(_messageBus: MessageBus, _serializer: Serializer);
    /**
     * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.
     */
    createMessageBroker(channel: string, runInZone?: boolean): ClientMessageBroker;
}
/**
 * @experimental WebWorker support in Angular is experimental.
 */
export abstract class ClientMessageBroker {
    abstract runOnService(args: UiArguments, returnType: Type): Promise<any>;
}
export class ClientMessageBroker_ extends ClientMessageBroker {
    channel: any;
    private _pending;
    private _sink;
    constructor(messageBus: MessageBus, _serializer: Serializer, channel: any);
    private _generateMessageId(name);
    runOnService(args: UiArguments, returnType: Type): Promise<any>;
    private _handleMessage(message);
}
/**
 * @experimental WebWorker support in Angular is experimental.
 */
export class FnArg {
    value: any;
    type: Type;
    constructor(value: any, type: Type);
}
/**
 * @experimental WebWorker support in Angular is experimental.
 */
export class UiArguments {
    method: string;
    args: FnArg[];
    constructor(method: string, args?: FnArg[]);
}
}
declare module '@angular/platform-browser/src/web_workers/shared/client_message_broker' {
export * from '~@angular/platform-browser/src/web_workers/shared/client_message_broker';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/shared/service_message_broker.d.ts
declare module '~@angular/platform-browser/src/web_workers/shared/service_message_broker' {
import { Type } from '~@angular/platform-browser/src/facade/lang';
import { MessageBus } from '~@angular/platform-browser/src/web_workers/shared/message_bus';
import { Serializer } from '~@angular/platform-browser/src/web_workers/shared/serializer';
/**
 * @experimental WebWorker support in Angular is currently experimental.
 */
export abstract class ServiceMessageBrokerFactory {
    /**
     * Initializes the given channel and attaches a new {@link ServiceMessageBroker} to it.
     */
    abstract createMessageBroker(channel: string, runInZone?: boolean): ServiceMessageBroker;
}
export class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {
    private _messageBus;
    constructor(_messageBus: MessageBus, _serializer: Serializer);
    createMessageBroker(channel: string, runInZone?: boolean): ServiceMessageBroker;
}
/**
 * Helper class for UIComponents that allows components to register methods.
 * If a registered method message is received from the broker on the worker,
 * the UIMessageBroker deserializes its arguments and calls the registered method.
 * If that method returns a promise, the UIMessageBroker returns the result to the worker.
 *
 * @experimental WebWorker support in Angular is currently experimental.
 */
export abstract class ServiceMessageBroker {
    abstract registerMethod(methodName: string, signature: Type[], method: Function, returnType?: Type): void;
}
export class ServiceMessageBroker_ extends ServiceMessageBroker {
    private _serializer;
    channel: any;
    private _sink;
    private _methods;
    constructor(messageBus: MessageBus, _serializer: Serializer, channel: any);
    registerMethod(methodName: string, signature: Type[], method: (..._: any[]) => Promise<any> | void, returnType?: Type): void;
    private _handleMessage(map);
    private _wrapWebWorkerPromise(id, promise, type);
}
/**
 * @experimental WebWorker support in Angular is currently experimental.
 */
export class ReceivedMessage {
    method: string;
    args: any[];
    id: string;
    type: string;
    constructor(data: {
        [key: string]: any;
    });
}
}
declare module '@angular/platform-browser/src/web_workers/shared/service_message_broker' {
export * from '~@angular/platform-browser/src/web_workers/shared/service_message_broker';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/shared/render_store.d.ts
declare module '~@angular/platform-browser/src/web_workers/shared/render_store' {
export class RenderStore {
    private _nextIndex;
    private _lookupById;
    private _lookupByObject;
    constructor();
    allocateId(): number;
    store(obj: any, id: number): void;
    remove(obj: any): void;
    deserialize(id: number): any;
    serialize(obj: any): number;
}
}
declare module '@angular/platform-browser/src/web_workers/shared/render_store' {
export * from '~@angular/platform-browser/src/web_workers/shared/render_store';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/shared/serializer.d.ts
declare module '~@angular/platform-browser/src/web_workers/shared/serializer' {
import { Type } from '~@angular/platform-browser/src/facade/lang';
import { RenderStore } from '~@angular/platform-browser/src/web_workers/shared/render_store';
/**
 * @experimental WebWorker support in Angular is currently experimental.
 */
export const PRIMITIVE: Type;
export class Serializer {
    private _renderStore;
    constructor(_renderStore: RenderStore);
    serialize(obj: any, type: any): Object;
    deserialize(map: any, type: any, data?: any): any;
    private _serializeLocation(loc);
    private _deserializeLocation(loc);
    private _serializeRenderComponentType(obj);
    private _deserializeRenderComponentType(map);
}
export class RenderStoreObject {
}
}
declare module '@angular/platform-browser/src/web_workers/shared/serializer' {
export * from '~@angular/platform-browser/src/web_workers/shared/serializer';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/facade/promise.d.ts
declare module '~@angular/platform-browser/src/facade/promise' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export class PromiseCompleter<R> {
    promise: Promise<R>;
    resolve: (value?: R | PromiseLike<R>) => void;
    reject: (error?: any, stackTrace?: string) => void;
    constructor();
}
export class PromiseWrapper {
    static resolve<T>(obj: T): Promise<T>;
    static reject(obj: any, _: any): Promise<any>;
    static catchError<T>(promise: Promise<T>, onError: (error: any) => T | PromiseLike<T>): Promise<T>;
    static all<T>(promises: (T | Promise<T>)[]): Promise<T[]>;
    static then<T, U>(promise: Promise<T>, success: (value: T) => U | PromiseLike<U>, rejection?: (error: any, stack?: any) => U | PromiseLike<U>): Promise<U>;
    static wrap<T>(computation: () => T): Promise<T>;
    static scheduleMicrotask(computation: () => any): void;
    static completer<T>(): PromiseCompleter<T>;
}
}
declare module '@angular/platform-browser/src/facade/promise' {
export * from '~@angular/platform-browser/src/facade/promise';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/facade/async.d.ts
declare module '~@angular/platform-browser/src/facade/async' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
export { Observable } from 'rxjs/Observable';
export { Subject } from 'rxjs/Subject';
export { PromiseCompleter, PromiseWrapper } from '~@angular/platform-browser/src/facade/promise';
export class TimerWrapper {
    static setTimeout(fn: (...args: any[]) => void, millis: number): number;
    static clearTimeout(id: number): void;
    static setInterval(fn: (...args: any[]) => void, millis: number): number;
    static clearInterval(id: number): void;
}
export class ObservableWrapper {
    static subscribe<T>(emitter: any, onNext: (value: T) => void, onError?: (exception: any) => void, onComplete?: () => void): Object;
    static isObservable(obs: any): boolean;
    /**
     * Returns whether `obs` has any subscribers listening to events.
     */
    static hasSubscribers(obs: EventEmitter<any>): boolean;
    static dispose(subscription: any): void;
    /**
     * @deprecated - use callEmit() instead
     */
    static callNext(emitter: EventEmitter<any>, value: any): void;
    static callEmit(emitter: EventEmitter<any>, value: any): void;
    static callError(emitter: EventEmitter<any>, error: any): void;
    static callComplete(emitter: EventEmitter<any>): void;
    static fromPromise(promise: Promise<any>): Observable<any>;
    static toPromise(obj: Observable<any>): Promise<any>;
}
/**
 * Use by directives and components to emit custom Events.
 *
 * ### Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * @Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   @Output() open: EventEmitter<any> = new EventEmitter();
 *   @Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * The events payload can be accessed by the parameter `$event` on the components output event
 * handler:
 *
 * ```
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * Uses Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 * @stable
 */
export class EventEmitter<T> extends Subject<T> {
    __isAsync: boolean;
    /**
     * Creates an instance of [EventEmitter], which depending on [isAsync],
     * delivers events synchronously or asynchronously.
     */
    constructor(isAsync?: boolean);
    emit(value: T): void;
    /**
     * @deprecated - use .emit(value) instead
     */
    next(value: any): void;
    subscribe(generatorOrNext?: any, error?: any, complete?: any): any;
}
}
declare module '@angular/platform-browser/src/facade/async' {
export * from '~@angular/platform-browser/src/facade/async';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/shared/message_bus.d.ts
declare module '~@angular/platform-browser/src/web_workers/shared/message_bus' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgZone } from '@angular/core';
import { EventEmitter } from '~@angular/platform-browser/src/facade/async';
/**
 * Message Bus is a low level API used to communicate between the UI and the background.
 * Communication is based on a channel abstraction. Messages published in a
 * given channel to one MessageBusSink are received on the same channel
 * by the corresponding MessageBusSource.
 *
 * @experimental WebWorker support in Angular is currenlty experimental.
 */
export abstract class MessageBus implements MessageBusSource, MessageBusSink {
    /**
     * Sets up a new channel on the MessageBus.
     * MUST be called before calling from or to on the channel.
     * If runInZone is true then the source will emit events inside the angular zone
     * and the sink will buffer messages and send only once the zone exits.
     * if runInZone is false then the source will emit events inside the global zone
     * and the sink will send messages immediately.
     */
    abstract initChannel(channel: string, runInZone?: boolean): void;
    /**
     * Assigns this bus to the given zone.
     * Any callbacks attached to channels where runInZone was set to true on initialization
     * will be executed in the given zone.
     */
    abstract attachToZone(zone: NgZone): void;
    /**
     * Returns an {@link EventEmitter} that emits every time a message
     * is received on the given channel.
     */
    abstract from(channel: string): EventEmitter<any>;
    /**
     * Returns an {@link EventEmitter} for the given channel
     * To publish methods to that channel just call next (or add in dart) on the returned emitter
     */
    abstract to(channel: string): EventEmitter<any>;
}
/**
 * @experimental WebWorker support in Angular is currenlty experimental.
 */
export interface MessageBusSource {
    /**
     * Sets up a new channel on the MessageBusSource.
     * MUST be called before calling from on the channel.
     * If runInZone is true then the source will emit events inside the angular zone.
     * if runInZone is false then the source will emit events inside the global zone.
     */
    initChannel(channel: string, runInZone: boolean): void;
    /**
     * Assigns this source to the given zone.
     * Any channels which are initialized with runInZone set to true will emit events that will be
     * executed within the given zone.
     */
    attachToZone(zone: NgZone): void;
    /**
     * Returns an {@link EventEmitter} that emits every time a message
     * is received on the given channel.
     */
    from(channel: string): EventEmitter<any>;
}
/**
 * @experimental WebWorker support in Angular is currenlty experimental.
 */
export interface MessageBusSink {
    /**
     * Sets up a new channel on the MessageBusSink.
     * MUST be called before calling to on the channel.
     * If runInZone is true the sink will buffer messages and send only once the zone exits.
     * if runInZone is false the sink will send messages immediatly.
     */
    initChannel(channel: string, runInZone: boolean): void;
    /**
     * Assigns this sink to the given zone.
     * Any channels which are initialized with runInZone set to true will wait for the given zone
     * to exit before sending messages.
     */
    attachToZone(zone: NgZone): void;
    /**
     * Returns an {@link EventEmitter} for the given channel
     * To publish methods to that channel just call next (or add in dart) on the returned emitter
     */
    to(channel: string): EventEmitter<any>;
}
}
declare module '@angular/platform-browser/src/web_workers/shared/message_bus' {
export * from '~@angular/platform-browser/src/web_workers/shared/message_bus';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/worker/platform_location.d.ts
declare module '~@angular/platform-browser/src/web_workers/worker/platform_location' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { PlatformLocation, UrlChangeListener } from '@angular/common';
import { ClientMessageBrokerFactory } from '~@angular/platform-browser/src/web_workers/shared/client_message_broker';
import { MessageBus } from '~@angular/platform-browser/src/web_workers/shared/message_bus';
import { Serializer } from '~@angular/platform-browser/src/web_workers/shared/serializer';
export class WebWorkerPlatformLocation extends PlatformLocation {
    private _serializer;
    private _broker;
    private _popStateListeners;
    private _hashChangeListeners;
    private _location;
    private _channelSource;
    constructor(brokerFactory: ClientMessageBrokerFactory, bus: MessageBus, _serializer: Serializer);
    getBaseHrefFromDOM(): string;
    onPopState(fn: UrlChangeListener): void;
    onHashChange(fn: UrlChangeListener): void;
    pathname: string;
    search: string;
    hash: string;
    pushState(state: any, title: string, url: string): void;
    replaceState(state: any, title: string, url: string): void;
    forward(): void;
    back(): void;
}
}
declare module '@angular/platform-browser/src/web_workers/worker/platform_location' {
export * from '~@angular/platform-browser/src/web_workers/worker/platform_location';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/worker/location_providers.d.ts
declare module '~@angular/platform-browser/src/web_workers/worker/location_providers' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { PlatformLocation } from '@angular/common';
import { NgZone } from '@angular/core';
import { WebWorkerPlatformLocation } from '~@angular/platform-browser/src/web_workers/worker/platform_location';
/**
 * Those providers should be added when the router is used in a worker context in addition to the
 * {@link ROUTER_PROVIDERS} and after them.
 * @experimental
 */
export const WORKER_APP_LOCATION_PROVIDERS: ({
    provide: typeof PlatformLocation;
    useClass: typeof WebWorkerPlatformLocation;
} | {
    provide: any;
    useFactory: (platformLocation: WebWorkerPlatformLocation, zone: NgZone) => () => Promise<boolean>;
    multi: boolean;
    deps: (typeof PlatformLocation | typeof NgZone)[];
})[];
}
declare module '@angular/platform-browser/src/web_workers/worker/location_providers' {
export * from '~@angular/platform-browser/src/web_workers/worker/location_providers';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/ui/platform_location.d.ts
declare module '~@angular/platform-browser/src/web_workers/ui/platform_location' {
import { BrowserPlatformLocation } from '~@angular/platform-browser/src/browser/location/browser_platform_location';
import { MessageBus } from '~@angular/platform-browser/src/web_workers/shared/message_bus';
import { Serializer } from '~@angular/platform-browser/src/web_workers/shared/serializer';
import { ServiceMessageBrokerFactory } from '~@angular/platform-browser/src/web_workers/shared/service_message_broker';
export class MessageBasedPlatformLocation {
    private _brokerFactory;
    private _platformLocation;
    private _serializer;
    private _channelSink;
    private _broker;
    constructor(_brokerFactory: ServiceMessageBrokerFactory, _platformLocation: BrowserPlatformLocation, bus: MessageBus, _serializer: Serializer);
    start(): void;
    private _getLocation();
    private _sendUrlChangeEvent(e);
    private _setPathname(pathname);
}
}
declare module '@angular/platform-browser/src/web_workers/ui/platform_location' {
export * from '~@angular/platform-browser/src/web_workers/ui/platform_location';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/web_workers/ui/location_providers.d.ts
declare module '~@angular/platform-browser/src/web_workers/ui/location_providers' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Injector } from '@angular/core';
import { BrowserPlatformLocation } from '~@angular/platform-browser/src/browser/location/browser_platform_location';
import { MessageBasedPlatformLocation } from '~@angular/platform-browser/src/web_workers/ui/platform_location';
/**
 * A list of {@link Provider}s. To use the router in a Worker enabled application you must
 * include these providers when setting up the render thread.
 * @experimental
 */
export const WORKER_UI_LOCATION_PROVIDERS: (typeof MessageBasedPlatformLocation | typeof BrowserPlatformLocation | {
    provide: any;
    useFactory: (injector: Injector) => () => void;
    multi: boolean;
    deps: typeof Injector[];
})[];
}
declare module '@angular/platform-browser/src/web_workers/ui/location_providers' {
export * from '~@angular/platform-browser/src/web_workers/ui/location_providers';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/worker_render.d.ts
declare module '~@angular/platform-browser/src/worker_render' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { OpaqueToken, PlatformRef } from '@angular/core';
import { MessageBus } from '~@angular/platform-browser/src/web_workers/shared/message_bus';
/**
 * Wrapper class that exposes the Worker
 * and underlying {@link MessageBus} for lower level message passing.
 *
 * @experimental WebWorker support is currently experimental.
 */
export class WebWorkerInstance {
    worker: Worker;
    bus: MessageBus;
}
/**
 * @experimental WebWorker support is currently experimental.
 */
export const WORKER_SCRIPT: OpaqueToken;
/**
 * A multiple providers used to automatically call the `start()` method after the service is
 * created.
 *
 * TODO(vicb): create an interface for startable services to implement
 * @experimental WebWorker support is currently experimental.
 */
export const WORKER_UI_STARTABLE_MESSAGING_SERVICE: OpaqueToken;
/**
 * @experimental WebWorker support is currently experimental.
 */
export const WORKER_UI_PLATFORM_PROVIDERS: Array<any>;
/**
 * @experimental WebWorker support is currently experimental.
 */
export const WORKER_UI_APPLICATION_PROVIDERS: Array<any>;
/**
 * @experimental WebWorker support is currently experimental.
 */
export function workerUiPlatform(): PlatformRef;
}
declare module '@angular/platform-browser/src/worker_render' {
export * from '~@angular/platform-browser/src/worker_render';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/worker_app.d.ts
declare module '~@angular/platform-browser/src/worker_app' {
import { PlatformRef } from '@angular/core';
/**
 * @experimental
 */
export const WORKER_APP_PLATFORM_PROVIDERS: Array<any>;
/**
 * @experimental
 */
export const WORKER_APP_APPLICATION_PROVIDERS: Array<any>;
/**
 * @experimental
 */
export function workerAppPlatform(): PlatformRef;
}
declare module '@angular/platform-browser/src/worker_app' {
export * from '~@angular/platform-browser/src/worker_app';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/debug/ng_probe.d.ts
declare module '~@angular/platform-browser/src/dom/debug/ng_probe' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DebugNode } from '@angular/core';
/**
 * Returns a {@link DebugElement} for the given native DOM element, or
 * null if the given native element does not have an Angular view associated
 * with it.
 */
export function inspectNativeElement(element: any): DebugNode;
/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 */
export const ELEMENT_PROBE_PROVIDERS: any[];
export const ELEMENT_PROBE_PROVIDERS_PROD_MODE: any[];
}
declare module '@angular/platform-browser/src/dom/debug/ng_probe' {
export * from '~@angular/platform-browser/src/dom/debug/ng_probe';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/dom_adapter.d.ts
declare module '~@angular/platform-browser/src/dom/dom_adapter' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Type } from '~@angular/platform-browser/src/facade/lang';
export function getDOM(): DomAdapter;
export function setDOM(adapter: DomAdapter): void;
export function setRootDomAdapter(adapter: DomAdapter): void;
/**
 * Provides DOM operations in an environment-agnostic way.
 */
export abstract class DomAdapter {
    xhrType: Type;
    abstract hasProperty(element: any, name: string): boolean;
    abstract setProperty(el: Element, name: string, value: any): any;
    abstract getProperty(el: Element, name: string): any;
    abstract invoke(el: Element, methodName: string, args: any[]): any;
    abstract logError(error: any): any;
    abstract log(error: any): any;
    abstract logGroup(error: any): any;
    abstract logGroupEnd(): any;
    /** @deprecated */
    getXHR(): Type;
    /**
     * Maps attribute names to their corresponding property names for cases
     * where attribute name doesn't match property name.
     */
    attrToPropMap: {
        [key: string]: string;
    };
    abstract parse(templateHtml: string): any;
    abstract query(selector: string): any;
    abstract querySelector(el: any, selector: string): HTMLElement;
    abstract querySelectorAll(el: any, selector: string): any[];
    abstract on(el: any, evt: any, listener: any): any;
    abstract onAndCancel(el: any, evt: any, listener: any): Function;
    abstract dispatchEvent(el: any, evt: any): any;
    abstract createMouseEvent(eventType: any): any;
    abstract createEvent(eventType: string): any;
    abstract preventDefault(evt: any): any;
    abstract isPrevented(evt: any): boolean;
    abstract getInnerHTML(el: any): string;
    /** Returns content if el is a <template> element, null otherwise. */
    abstract getTemplateContent(el: any): any;
    abstract getOuterHTML(el: any): string;
    abstract nodeName(node: any): string;
    abstract nodeValue(node: any): string;
    abstract type(node: any): string;
    abstract content(node: any): any;
    abstract firstChild(el: any): Node;
    abstract nextSibling(el: any): Node;
    abstract parentElement(el: any): Node;
    abstract childNodes(el: any): Node[];
    abstract childNodesAsList(el: any): Node[];
    abstract clearNodes(el: any): any;
    abstract appendChild(el: any, node: any): any;
    abstract removeChild(el: any, node: any): any;
    abstract replaceChild(el: any, newNode: any, oldNode: any): any;
    abstract remove(el: any): Node;
    abstract insertBefore(el: any, node: any): any;
    abstract insertAllBefore(el: any, nodes: any): any;
    abstract insertAfter(el: any, node: any): any;
    abstract setInnerHTML(el: any, value: any): any;
    abstract getText(el: any): string;
    abstract setText(el: any, value: string): any;
    abstract getValue(el: any): string;
    abstract setValue(el: any, value: string): any;
    abstract getChecked(el: any): boolean;
    abstract setChecked(el: any, value: boolean): any;
    abstract createComment(text: string): any;
    abstract createTemplate(html: any): HTMLElement;
    abstract createElement(tagName: any, doc?: any): HTMLElement;
    abstract createElementNS(ns: string, tagName: string, doc?: any): Element;
    abstract createTextNode(text: string, doc?: any): Text;
    abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;
    abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;
    abstract createShadowRoot(el: any): any;
    abstract getShadowRoot(el: any): any;
    abstract getHost(el: any): any;
    abstract getDistributedNodes(el: any): Node[];
    abstract clone(node: Node): Node;
    abstract getElementsByClassName(element: any, name: string): HTMLElement[];
    abstract getElementsByTagName(element: any, name: string): HTMLElement[];
    abstract classList(element: any): any[];
    abstract addClass(element: any, className: string): any;
    abstract removeClass(element: any, className: string): any;
    abstract hasClass(element: any, className: string): boolean;
    abstract setStyle(element: any, styleName: string, styleValue: string): any;
    abstract removeStyle(element: any, styleName: string): any;
    abstract getStyle(element: any, styleName: string): string;
    abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;
    abstract tagName(element: any): string;
    abstract attributeMap(element: any): Map<string, string>;
    abstract hasAttribute(element: any, attribute: string): boolean;
    abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;
    abstract getAttribute(element: any, attribute: string): string;
    abstract getAttributeNS(element: any, ns: string, attribute: string): string;
    abstract setAttribute(element: any, name: string, value: string): any;
    abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;
    abstract removeAttribute(element: any, attribute: string): any;
    abstract removeAttributeNS(element: any, ns: string, attribute: string): any;
    abstract templateAwareRoot(el: any): any;
    abstract createHtmlDocument(): HTMLDocument;
    abstract defaultDoc(): HTMLDocument;
    abstract getBoundingClientRect(el: any): any;
    abstract getTitle(): string;
    abstract setTitle(newTitle: string): any;
    abstract elementMatches(n: any, selector: string): boolean;
    abstract isTemplateElement(el: any): boolean;
    abstract isTextNode(node: any): boolean;
    abstract isCommentNode(node: any): boolean;
    abstract isElementNode(node: any): boolean;
    abstract hasShadowRoot(node: any): boolean;
    abstract isShadowRoot(node: any): boolean;
    abstract importIntoDoc(node: Node): Node;
    abstract adoptNode(node: Node): Node;
    abstract getHref(element: any): string;
    abstract getEventKey(event: any): string;
    abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;
    abstract supportsDOMEvents(): boolean;
    abstract supportsNativeShadowDOM(): boolean;
    abstract getGlobalEventTarget(target: string): any;
    abstract getHistory(): History;
    abstract getLocation(): Location;
    abstract getBaseHref(): string;
    abstract resetBaseElement(): void;
    abstract getUserAgent(): string;
    abstract setData(element: any, name: string, value: string): any;
    abstract getComputedStyle(element: any): any;
    abstract getData(element: any, name: string): string;
    abstract setGlobalVar(name: string, value: any): any;
    abstract requestAnimationFrame(callback: any): number;
    abstract cancelAnimationFrame(id: any): any;
    abstract supportsWebAnimation(): boolean;
    abstract performanceNow(): number;
    abstract getAnimationPrefix(): string;
    abstract getTransitionEnd(): string;
    abstract supportsAnimation(): boolean;
    abstract supportsCookies(): boolean;
    abstract getCookie(name: string): string;
    abstract setCookie(name: string, value: string): any;
}
}
declare module '@angular/platform-browser/src/dom/dom_adapter' {
export * from '~@angular/platform-browser/src/dom/dom_adapter';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/dom_renderer.d.ts
declare module '~@angular/platform-browser/src/dom/dom_renderer' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { RenderComponentType, Renderer, RootRenderer } from '@angular/core';
import { DomSharedStylesHost } from '~@angular/platform-browser/src/dom/shared_styles_host';
import { AnimationKeyframe, AnimationStyles, AnimationPlayer, AnimationDriver, RenderDebugInfo } from '~@angular/platform-browser/core_private';
import { EventManager } from '~@angular/platform-browser/src/dom/events/event_manager';
export abstract class DomRootRenderer implements RootRenderer {
    document: any;
    eventManager: EventManager;
    sharedStylesHost: DomSharedStylesHost;
    animationDriver: AnimationDriver;
    protected registeredComponents: Map<string, DomRenderer>;
    constructor(document: any, eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, animationDriver: AnimationDriver);
    renderComponent(componentProto: RenderComponentType): Renderer;
}
export class DomRootRenderer_ extends DomRootRenderer {
    constructor(_document: any, _eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, animationDriver: AnimationDriver);
}
export class DomRenderer implements Renderer {
    private _rootRenderer;
    private componentProto;
    private _animationDriver;
    private _contentAttr;
    private _hostAttr;
    private _styles;
    constructor(_rootRenderer: DomRootRenderer, componentProto: RenderComponentType, _animationDriver: AnimationDriver);
    selectRootElement(selectorOrNode: string | any, debugInfo: RenderDebugInfo): Element;
    createElement(parent: Element, name: string, debugInfo: RenderDebugInfo): Node;
    createViewRoot(hostElement: any): any;
    createTemplateAnchor(parentElement: any, debugInfo: RenderDebugInfo): any;
    createText(parentElement: any, value: string, debugInfo: RenderDebugInfo): any;
    projectNodes(parentElement: any, nodes: any[]): void;
    attachViewAfter(node: any, viewRootNodes: any[]): void;
    detachView(viewRootNodes: any[]): void;
    destroyView(hostElement: any, viewAllNodes: any[]): void;
    listen(renderElement: any, name: string, callback: Function): Function;
    listenGlobal(target: string, name: string, callback: Function): Function;
    setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;
    setElementAttribute(renderElement: any, attributeName: string, attributeValue: string): void;
    setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string): void;
    setElementClass(renderElement: any, className: string, isAdd: boolean): void;
    setElementStyle(renderElement: any, styleName: string, styleValue: string): void;
    invokeElementMethod(renderElement: any, methodName: string, args: any[]): void;
    setText(renderNode: any, text: string): void;
    animate(element: any, startingStyles: AnimationStyles, keyframes: AnimationKeyframe[], duration: number, delay: number, easing: string): AnimationPlayer;
}
export const COMPONENT_VARIABLE: string;
export const HOST_ATTR: string;
export const CONTENT_ATTR: string;
}
declare module '@angular/platform-browser/src/dom/dom_renderer' {
export * from '~@angular/platform-browser/src/dom/dom_renderer';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/events/dom_events.d.ts
declare module '~@angular/platform-browser/src/dom/events/dom_events' {
import { EventManagerPlugin } from '~@angular/platform-browser/src/dom/events/event_manager';
export class DomEventsPlugin extends EventManagerPlugin {
    supports(eventName: string): boolean;
    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;
    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;
}
}
declare module '@angular/platform-browser/src/dom/events/dom_events' {
export * from '~@angular/platform-browser/src/dom/events/dom_events';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/src/dom/shared_styles_host.d.ts
declare module '~@angular/platform-browser/src/dom/shared_styles_host' {
export class SharedStylesHost {
    constructor();
    addStyles(styles: string[]): void;
    onStylesAdded(additions: string[]): void;
    getAllStyles(): string[];
}
export class DomSharedStylesHost extends SharedStylesHost {
    private _hostNodes;
    constructor(doc: any);
    addHost(hostNode: Node): void;
    removeHost(hostNode: Node): void;
    onStylesAdded(additions: string[]): void;
}
}
declare module '@angular/platform-browser/src/dom/shared_styles_host' {
export * from '~@angular/platform-browser/src/dom/shared_styles_host';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/private_export.d.ts
declare module '~@angular/platform-browser/private_export' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as ng_proble from '~@angular/platform-browser/src/dom/debug/ng_probe';
import * as dom_adapter from '~@angular/platform-browser/src/dom/dom_adapter';
import * as dom_renderer from '~@angular/platform-browser/src/dom/dom_renderer';
import * as dom_events from '~@angular/platform-browser/src/dom/events/dom_events';
import * as shared_styles_host from '~@angular/platform-browser/src/dom/shared_styles_host';
export namespace __platform_browser_private_types__ {
    type DomAdapter = dom_adapter.DomAdapter;
    var DomAdapter: typeof dom_adapter.DomAdapter;
    var getDOM: typeof dom_adapter.getDOM;
    var setRootDomAdapter: typeof dom_adapter.setRootDomAdapter;
    type DomRootRenderer = dom_renderer.DomRootRenderer;
    var DomRootRenderer: typeof dom_renderer.DomRootRenderer;
    type DomRootRenderer_ = dom_renderer.DomRootRenderer_;
    var DomRootRenderer_: typeof dom_renderer.DomRootRenderer_;
    type DomSharedStylesHost = shared_styles_host.DomSharedStylesHost;
    var DomSharedStylesHost: typeof shared_styles_host.DomSharedStylesHost;
    type SharedStylesHost = shared_styles_host.SharedStylesHost;
    var SharedStylesHost: typeof shared_styles_host.SharedStylesHost;
    var ELEMENT_PROBE_PROVIDERS: typeof ng_proble.ELEMENT_PROBE_PROVIDERS;
    type DomEventsPlugin = dom_events.DomEventsPlugin;
    var DomEventsPlugin: typeof dom_events.DomEventsPlugin;
}
export var __platform_browser_private__: {
    DomAdapter: typeof dom_adapter.DomAdapter;
    getDOM: () => dom_adapter.DomAdapter;
    setRootDomAdapter: (adapter: dom_adapter.DomAdapter) => void;
    DomRootRenderer: typeof dom_renderer.DomRootRenderer;
    DomRootRenderer_: typeof dom_renderer.DomRootRenderer_;
    DomSharedStylesHost: typeof shared_styles_host.DomSharedStylesHost;
    SharedStylesHost: typeof shared_styles_host.SharedStylesHost;
    ELEMENT_PROBE_PROVIDERS: any[];
    DomEventsPlugin: typeof dom_events.DomEventsPlugin;
};
}
declare module '@angular/platform-browser/private_export' {
export * from '~@angular/platform-browser/private_export';
}

// Generated by typings
// Source: jspm_packages/npm/@angular/platform-browser@2.0.0-rc.4/index.d.ts
declare module '~@angular/platform-browser/index' {
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export { BrowserPlatformLocation } from '~@angular/platform-browser/src/browser/location/browser_platform_location';
export { Title } from '~@angular/platform-browser/src/browser/title';
export { disableDebugTools, enableDebugTools } from '~@angular/platform-browser/src/browser/tools/tools';
export { By } from '~@angular/platform-browser/src/dom/debug/by';
export { DOCUMENT } from '~@angular/platform-browser/src/dom/dom_tokens';
export { EVENT_MANAGER_PLUGINS, EventManager } from '~@angular/platform-browser/src/dom/events/event_manager';
export { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '~@angular/platform-browser/src/dom/events/hammer_gestures';
export { DomSanitizationService, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SecurityContext } from '~@angular/platform-browser/src/security/dom_sanitization_service';
export * from '~@angular/platform-browser/src/browser';
export { ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments } from '~@angular/platform-browser/src/web_workers/shared/client_message_broker';
export { ReceivedMessage, ServiceMessageBroker, ServiceMessageBrokerFactory } from '~@angular/platform-browser/src/web_workers/shared/service_message_broker';
export { PRIMITIVE } from '~@angular/platform-browser/src/web_workers/shared/serializer';
export * from '~@angular/platform-browser/src/web_workers/shared/message_bus';
export { WORKER_APP_LOCATION_PROVIDERS } from '~@angular/platform-browser/src/web_workers/worker/location_providers';
export { WORKER_UI_LOCATION_PROVIDERS } from '~@angular/platform-browser/src/web_workers/ui/location_providers';
export * from '~@angular/platform-browser/src/worker_render';
export * from '~@angular/platform-browser/src/worker_app';
export * from '~@angular/platform-browser/private_export';
}
declare module '@angular/platform-browser/index' {
export * from '~@angular/platform-browser/index';
}
declare module '@angular/platform-browser' {
export * from '~@angular/platform-browser/index';
}
